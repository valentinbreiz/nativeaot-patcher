<Project>
  <!-- Resolves the path of 'ilc' to IlcToolsPath. -->
  <Target Name="ResolveIlcPath" BeforeTargets="CustomizeReferences">
    <ItemGroup>
      <!-- For ARM64 cross-compilation, always use x64 ILC tools -->
      <HostILCompilerPack Include="runtime.linux-x64.Microsoft.DotNet.ILCompiler"
                          Condition="'$(RuntimeIdentifier)' == 'linux-arm64'">
        <NuGetPackageVersion>$(BundledNETCoreAppPackageVersion)</NuGetPackageVersion>
        <NuGetPackageId>runtime.linux-x64.Microsoft.DotNet.ILCompiler</NuGetPackageId>
      </HostILCompilerPack>

      <!-- For all other architectures, use native ILC -->
      <HostILCompilerPack Include="runtime.$(RuntimeIdentifier).Microsoft.DotNet.ILCompiler"
                          Condition="'$(RuntimeIdentifier)' != 'linux-arm64'">
        <NuGetPackageVersion>$(BundledNETCoreAppPackageVersion)</NuGetPackageVersion>
        <NuGetPackageId>runtime.$(RuntimeIdentifier).Microsoft.DotNet.ILCompiler</NuGetPackageId>
      </HostILCompilerPack>
    </ItemGroup>

    <GetPackageDirectory
      Items="@(HostILCompilerPack)"
      PackageFolders="@(AssetsFilePackageFolder)"
    >

      <Output TaskParameter="Output" ItemName="ResolvedILCompilerPack" />
    </GetPackageDirectory>

    <PropertyGroup>
      <IlcHostPackagePath>@(ResolvedILCompilerPack->'%(PackageDirectory)')</IlcHostPackagePath>
      <IlcSdkPath Condition="$(IlcHostPackagePath) != ''" >$([MSBuild]::NormalizePath($(IlcHostPackagePath)/sdk/))</IlcSdkPath>
      <IlcFrameworkPath Condition="$(IlcHostPackagePath) != ''" >$([MSBuild]::NormalizePath($(IlcHostPackagePath)/framework/))</IlcFrameworkPath>
      <IlcToolsPath Condition="$(IlcHostPackagePath) != ''" >$([MSBuild]::NormalizePath($(IlcHostPackagePath)/tools/))</IlcToolsPath>
    </PropertyGroup>
    <Message Importance="High" Text="⚙️ [ILC] Using ILCompiler from: $(IlcToolsPath)" />
  </Target>

  <Target Name="CustomizeReferences" BeforeTargets="SetupPatcher">
    <ItemGroup>
      <PrivateSdkAssemblies Include="$(IlcSdkPath)*.dll"/>
      <FrameworkAssemblies Include="$(IlcFrameworkPath)**/*.dll"/>
      <ReferencePath Remove="@(ReferencePath)" Condition="'%(ReferencePath.ReferenceOutputAssembly)' != 'true' and '%(ReferencePath.NuGetSourceType)' != 'Package'" />
    </ItemGroup>
  </Target>
  
  <!-- Ilc Generates an Invalid Exports File for ld, here we clean it up -->
  <Target Name="CleanVersionScript" AfterTargets="CompileWithIlc" BeforeTargets="LinkTarget" Condition="$(ExportsFile) != ''">
    <PropertyGroup>
      <__Semicolon>;</__Semicolon>
    </PropertyGroup>

    <!-- Read the original version script -->
    <ReadLinesFromFile File="$(ExportsFile)">
      <Output TaskParameter="Lines" ItemName="RawVersionScriptLines" />
    </ReadLinesFromFile>

    <!-- Filter out lines that are just semicolons -->
    <ItemGroup>
      <CleanedVersionScriptLines Include="@(RawVersionScriptLines)"  Condition="$([System.String]::new('%(RawVersionScriptLines.Identity)').Trim().Equals($(__Semicolon)).ToString()) == 'False'" />
    </ItemGroup>

    <!-- Override file with Cleaned Lines -->
    <WriteLinesToFile
      File="$(ExportsFile)"
      Lines="@(CleanedVersionScriptLines)"
      Overwrite="true" />
  </Target>
</Project>
