<Project>
  <PropertyGroup>
    <PatchedAssembly />
    <EnablePatching Condition="'$(EnablePatching)'!='false'">true</EnablePatching>
    <EnableAOT>true</EnableAOT>
  </PropertyGroup>

  <UsingTask TaskName="Cosmos.Build.Patcher.Tasks.PatcherTask"
             AssemblyFile="$(CosmosPatcherTasksAssembly)" />
  <UsingTask TaskName="Cosmos.Build.Patcher.Tasks.FindPluggedAssembliesTask"
             AssemblyFile="$(CosmosPatcherTasksAssembly)" />

  <Target Name="Log" BeforeTargets="BeforeBuild">
    <Message Importance="High" Text="MSBuildThisFileDirectory: '$(MSBuildThisFileDirectory)'" />
    <Message Importance="High" Text="Configuration: '$(Configuration)'" />
    <Message Importance="High" Text="OutputPath: '$(OutputPath)'" />
    <Message Importance="High" Text="IntermediateOutputPath: '$(IntermediateOutputPath)'" />
    <Message Importance="High" Text="PatcherBuildDll: '$(PatcherBuildDll)'" />
    <Message Importance="High" Text="PatcherPath: '$(PatcherPath)'" />
    <Message Importance="High" Text="PatcherOutputPath: '$(PatcherOutputPath)'" />
    <Message Importance="High" Text="PatchedAssembly: '$(PatchedAssembly)'" />
    <Message Importance="High" Text="TargetFramework: '$(TargetFramework)'" />
    <Message Importance="High" Text="PatcherExists: Exists('$(PatcherPath)')" />
    <Message Importance="High" Text="PatcherTask:$(PatcherTask)" />
  </Target>

  <!--
    Run SetupPatcher before the ILCompiler step to ensure we operate on IL assemblies.
    This avoids trying to read NativeAOT outputs (native PE) with Mono.Cecil.
  -->
  <Target Name="SetupPatcher" AfterTargets="Build" BeforeTargets="CompileWithIlc" DependsOnTargets="ResolveIlcPath">
    <PropertyGroup>
      <PatcherOutputPath Condition="$(PatcherOutputPath) == ''">$(IntermediateOutputPath)/cosmos/ref/</PatcherOutputPath>
      <!-- The Main Assembly is patched to the root folder of Cosmos to make it easy to be found by other build tools -->
      <PatchedAssembly Condition="$(PatcherOutputPath) == ''">$(IntermediateOutputPath)/cosmos/$(AssemblyName)_patched.dll</PatchedAssembly>
    </PropertyGroup>

    <!-- Build candidate set of assemblies with output destinations -->
    <ItemGroup>
      <CandidateAssemblies Include="$(OutputPath)$(AssemblyName).dll">
        <PatcherOutputPath>$(IntermediateOutputPath)/cosmos/$(AssemblyName)_patched.dll</PatcherOutputPath>
      </CandidateAssemblies>
      <CandidateAssemblies Include="@(ReferencePath)">
        <PatcherOutputPath>$(IntermediateOutputPath)/cosmos/ref/%(Filename).dll</PatcherOutputPath>
      </CandidateAssemblies>
      <CandidateAssemblies Include="@(PrivateSdkAssemblies)">
        <PatcherOutputPath>$(IntermediateOutputPath)/cosmos/ref/%(Filename).dll</PatcherOutputPath>
      </CandidateAssemblies>
      <CandidateAssemblies Include="@(FrameworkAssemblies)">
        <PatcherOutputPath>$(IntermediateOutputPath)/cosmos/ref/%(Filename).dll</PatcherOutputPath>
      </CandidateAssemblies>
    </ItemGroup>

    <!-- Include ILC SDK reference assemblies as candidates (System.Console, etc.) -->
    <ItemGroup>
      <IlcSdkAssemblies Include="$(IlcToolsPath)sdk/*.dll" Condition="'$(IlcToolsPath)' != ''" />
      <CandidateAssemblies Include="@(IlcSdkAssemblies)">
        <PatcherOutputPath>$(IntermediateOutputPath)/cosmos/ref/%(Filename).dll</PatcherOutputPath>
      </CandidateAssemblies>
    </ItemGroup>
    
    <!-- Filter references to find plug assemblies based on PlugReference assembly names -->
    <ItemGroup>
      <!-- Always include the main assembly as a plug -->
      <PlugRef Include="$(OutputPath)$(AssemblyName).dll" />
      
      <!-- Filter ReferencePath items that match PlugReference assembly names -->
      <PlugRef Include="@(ReferencePath)" 
               Condition="'%(ReferencePath.Filename)' != '' and '@(PlugReference)' != '' and $([System.String]::new('@(PlugReference, ';')').Contains('%(ReferencePath.Filename)'))" />
      
      <!-- Also check for references in the output directory that match PlugReference names -->
      <PlugRef Include="$(OutputPath)%(PlugReference.Identity).dll" 
               Condition="Exists('$(OutputPath)%(PlugReference.Identity).dll')" />
    </ItemGroup>

    <!-- Remove duplicates from PlugRef -->
    <RemoveDuplicates Inputs="@(PlugRef)">
      <Output TaskParameter="Filtered" ItemName="UniquePlugRef"/>
    </RemoveDuplicates>
    
    <ItemGroup>
      <PlugRef Remove="@(PlugRef)" />
      <PlugRef Include="@(UniquePlugRef)" />
    </ItemGroup>
    
    <!-- Clean Output Path -->
    <RemoveDir Directories="$(PatcherOutputPath)" />

    <!-- Ensure the output directories exist -->
    <MakeDir Directories="$(PatcherOutputPath)" />
    <MakeDir Directories="$([MSBuild]::NormalizePath('$(IntermediateOutputPath)/cosmos'))" />

    <Message Importance="High" Text="PlugReference Assembly Names:" />
    <Message Importance="High" Text="  %(PlugReference.Identity)" />
    
    <Message Importance="High" Text="Resolved PlugRef DLL Paths:" />
    <Message Importance="High" Text="  %(PlugRef.Identity)" />

    <!-- Use FindPluggedAssembliesTask to filter only assemblies that contain target types -->
    <FindPluggedAssembliesTask PlugAssemblies="@(PlugRef)"
                               CandidateAssemblies="@(CandidateAssemblies)">
      <Output TaskParameter="AssembliesToPatch" ItemName="FilteredAssembliesToPatch" />
    </FindPluggedAssembliesTask>

    <Message Importance="High" Text="Candidates:" />
    <Message Importance="High" Text="  %(CandidateAssemblies.Identity)" />
    <Message Importance="High" Text="Filtered assemblies (by plugs):" />
    <Message Importance="High" Text="  %(FilteredAssembliesToPatch.Identity)" />

    <!-- Build final patch list -->
    <ItemGroup>
      <!-- Always include the main assembly so ILC has a "patched" app binary -->
      <AssembliesToPatch Include="$(OutputPath)$(AssemblyName).dll">
        <PatcherOutputPath>$(IntermediateOutputPath)/cosmos/$(AssemblyName)_patched.dll</PatcherOutputPath>
      </AssembliesToPatch>

      <!-- Add filtered assemblies; place them under ref/ by filename -->
      <AssembliesToPatch Include="@(FilteredAssembliesToPatch)">
        <PatcherOutputPath>$(IntermediateOutputPath)/cosmos/ref/%(Filename).dll</PatcherOutputPath>
      </AssembliesToPatch>

      <!-- Always include System.Private.CoreLib for ILC reference stability -->
      <AssembliesToPatch Include="@(CandidateAssemblies)"
                         Condition="'%(CandidateAssemblies.Filename)' == 'System.Private.CoreLib'" />
    </ItemGroup>

    <!-- De-dup final patch list -->
    <RemoveDuplicates Inputs="@(AssembliesToPatch)">
      <Output TaskParameter="Filtered" ItemName="AssembliesToPatch"/>
    </RemoveDuplicates>

    <Message Importance="High" Text="Assemblies selected for patching:" />
    <Message Importance="High" Text="  %(AssembliesToPatch.Identity) -> %(AssembliesToPatch.PatcherOutputPath)" />

    <!-- Copy all non-patched candidates to the ref folder so ILC can resolve them -->
    <ItemGroup>
      <AssembliesToCopy Include="@(CandidateAssemblies)"
                        Condition="$([System.String]::new('@(AssembliesToPatch, ';')').Contains('%(CandidateAssemblies.Identity)')) == false" />
    </ItemGroup>

    <Message Importance="Low" Text="Assemblies copied (no patch): %(AssembliesToCopy.Identity) -> %(AssembliesToCopy.PatcherOutputPath)" />

    <!-- Ensure copy target directories exist -->
    <ItemGroup>
      <CopyDirs Include="@(AssembliesToCopy->'$([System.IO.Path]::GetDirectoryName(%(PatcherOutputPath)))')" />
    </ItemGroup>
    <RemoveDuplicates Inputs="@(CopyDirs)">
      <Output TaskParameter="Filtered" ItemName="CopyDirs"/>
    </RemoveDuplicates>
    <MakeDir Directories="@(CopyDirs)" />

    <Copy SourceFiles="@(AssembliesToCopy)"
          DestinationFiles="@(AssembliesToCopy->'%(PatcherOutputPath)')"
          SkipUnchangedFiles="true" />
  </Target>
  
  <!-- Clean target to remove the asm folder -->
  <Target Name="CleanPatcher" BeforeTargets="Clean">
    <PropertyGroup>
      <PatcherOutputPath>$(IntermediateOutputPath)/cosmos/asm/</PatcherOutputPath>
    </PropertyGroup>

    <RemoveDir Directories="$(PatcherOutputPath)" />
  </Target>

  <Import Project="Patcher.Build.Unix.targets" Condition="'$(OS)' != 'Windows_NT'"/>
  <Import Project="Patcher.Build.Windows.targets" Condition="'$(OS)' == 'Windows_NT'"/>

</Project>
