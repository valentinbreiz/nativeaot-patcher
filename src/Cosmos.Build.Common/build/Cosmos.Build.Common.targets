<Project>
  <PropertyGroup>
    <CosmosOutputPath Condition="$(CosmosOutputPath) == ''">$(OutputPath)/cosmos</CosmosOutputPath>
    <CosmosIntermediateOutputPath Condition="$(CosmosIntermediateOutputPath) == ''">$(IntermediateOutputPath)/cosmos</CosmosIntermediateOutputPath>
    <IsoRoot Condition="$(IsoRoot) == ''">$(CosmosIntermediateOutputPath)/iso_root</IsoRoot>
    <IsoOutput Condition="$(IsoOutput) == ''">$(CosmosOutputPath)/$(AssemblyName).iso</IsoOutput>
  </PropertyGroup>

  <Import Project="Common.Build.Unix.targets" Condition="'$(OS)' != 'Windows_NT'"/>
  <Import Project="Common.Build.Windows.targets" Condition="'$(OS)' == 'Windows_NT'"/>

  <Target Name="LinkTarget" DependsOnTargets="$(LinkTargetDependsOn)" AfterTargets="Build">
    <!-- Define paths used for linking and ISO creation -->
    <PropertyGroup>
      <ElfBinary>$([MSBuild]::NormalizePath('$(OutputPath)/$(AssemblyName).elf'))</ElfBinary>
    </PropertyGroup>

    <ItemGroup>
      <ObjFiles Include="$(IntermediateOutputPath)/cosmos/asm/*.obj" />
      <!-- GCC produced object files -->
      <ObjFiles Include="$(IntermediateOutputPath)/cosmos/cobj/*.obj" />
      <ObjFiles Include="$(IntermediateOutputPath)/cosmos/cobj/*.o" />
    </ItemGroup>

    <ItemGroup>
      <!-- Arguments for ld.lld -->
      <LinkerArgs Include="-T Linker/linker.ld" />
      <LinkerArgs Include="-m elf_x86_64" />
      <LinkerArgs Include="-nostdlib" />
      <LinkerArgs Include="-static" />
      <LinkerArgs Include="-z max-page-size=0x1000" />
      <LinkerArgs Include="%(ManagedBinary.OutputFile)" />
      <LinkerArgs Include="@(ObjFiles->'%(FullPath)')" />
      <LinkerArgs Include="-o $(ElfBinary)" />
      <LinkerArgs Include="--error-limit=0" />
    </ItemGroup>
    <Error Condition="'$(LdLinkerPath)' == ''" Text="❌ Error: 'ld.lld' linker was not found. Install llvm or set the 'LdLinkerPath' property" />

    <Exec Command="&quot;$(LdLinkerPath)&quot; @(LinkerArgs, ' ')" />
    <Message Text="✅ Built ELF: $(AssemblyName).elf in publish folder" Importance="High" />
  </Target>

  <Target Name="BuildISO" AfterTargets="LinkTarget">
    <Message Text="🚀 Creating ISO image with Limine..." Importance="High" />

    <!-- Remove old ISO directory if it exists -->
    <RemoveDir Directories="$(IsoRoot)" />

    <!-- Create new directories for Limine and EFI boot files -->
    <MakeDir Directories="$(IsoRoot)/boot/limine" />
    <MakeDir Directories="$(IsoRoot)/EFI/BOOT" />

    <ItemGroup>
      <!-- Includes any files under 'limine' folder -->
      <LimineFiles Include="$(CosmosIntermediateOutputPath)/limine/**" />
    </ItemGroup>

    <!-- Download and build Limine (only if not already there) -->
    <Exec Command="git clone https://github.com/limine-bootloader/limine.git --branch=v9.x-binary --depth=1 $(CosmosIntermediateOutputPath)/limine" IgnoreExitCode="true" />
    <Exec Command="make -C $(CosmosIntermediateOutputPath)/limine CC=clang" />

    <!-- Copy built ELF and Limine config to ISO root -->
    <Copy SourceFiles="$(ElfBinary)" DestinationFolder="$(IsoRoot)/boot/" />
    <Copy SourceFiles="$(MSBuildProjectDirectory)/Bootloader/limine.conf" DestinationFolder="$(IsoRoot)/boot/limine/" />

    <!-- Copy Limine files -->
    <Copy SourceFiles="$(CosmosIntermediateOutputPath)/limine/limine-bios.sys;$(CosmosIntermediateOutputPath)/limine/limine-bios-cd.bin;$(CosmosIntermediateOutputPath)/limine/limine-uefi-cd.bin" DestinationFolder="$(IsoRoot)/boot/limine/" />
    <Copy SourceFiles="$(CosmosIntermediateOutputPath)/limine/BOOTX64.EFI" DestinationFolder="$(IsoRoot)/EFI/BOOT/" />

    <!-- Arguments for xorriso to generate an ISO with MBR and UEFI boot entries -->
    <ItemGroup>
      <XorrisoArgs Include="-as mkisofs" />
      <XorrisoArgs Include="-R" />
      <XorrisoArgs Include="-J" />
      <XorrisoArgs Include="-b boot/limine/limine-bios-cd.bin" />
      <XorrisoArgs Include="-no-emul-boot" />
      <XorrisoArgs Include="-boot-load-size 4" />
      <XorrisoArgs Include="-boot-info-table" />
      <XorrisoArgs Include="--efi-boot boot/limine/limine-uefi-cd.bin" />
      <XorrisoArgs Include="-efi-boot-part" />
      <XorrisoArgs Include="--efi-boot-image" />
      <XorrisoArgs Include="--protective-msdos-label $(FinalIsoRoot)" />
      <XorrisoArgs Include="-o $(IsoOutput)" />
    </ItemGroup>

    <!-- Create Output Dir -->
    <MakeDir Directories="$(CosmosOutputPath)" />

    <!-- Build the ISO -->
    <Exec Command="&quot;$(XorrisoBinary)&quot; @(XorrisoArgs, ' ')" />

    <!-- Install Limine on the new ISO -->
    <Exec Command="$(CosmosIntermediateOutputPath)/limine/limine bios-install $(IsoOutput)" />
    <Message Text="✅ ISO created at: $(IsoOutput)" Importance="High" />
  </Target>

  <Target Name="PublishISO" AfterTargets="Publish">
    <!-- Copy the ISO File to the Publish -->
    <Copy SourceFiles="$(IsoOutput)" DestinationFolder="$(PublishDir)" />

    <Message Text="✅ ISO Copied to Publish Foder: $(PublishDir)" Importance="High" />
  </Target>
</Project>
