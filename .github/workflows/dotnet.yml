name: .NET Tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "**" ]

jobs:
  patcher-tests:
    name: Run Cosmos.Patcher.Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest ]
        dotnet-version: [ 9.0.x ]
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🛠️ Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: 🔄 Restore Dependencies
        run: dotnet restore ./tests/Cosmos.Patcher.Tests/Cosmos.Patcher.Tests.csproj

      - name: 🔨 Build Cosmos.Patcher
        run: dotnet build ./src/Cosmos.Patcher/Cosmos.Patcher.csproj

      - name: 🔨 Build Cosmos.Patcher.Build
        run: dotnet build ./src/Cosmos.Patcher.Build/Cosmos.Patcher.Build.csproj

      - name: 🔨 Build Cosmos.Patcher.Tests
        run: dotnet build ./tests/Cosmos.Patcher.Tests/Cosmos.Patcher.Tests.csproj --configuration Debug --no-restore

      - name: 🚀 Run Tests
        run: dotnet test ./tests/Cosmos.Patcher.Tests/Cosmos.Patcher.Tests.csproj --no-build --configuration Debug --logger "trx;LogFileName=Cosmos.Patcher.Tests.trx"

      - name: 📤 Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: Cosmos.Patcher.Tests-Results
          path: ./tests/Cosmos.Patcher.Tests/TestResults/Cosmos.Patcher.Tests.trx

  scanner-tests:
    name: Run Cosmos.Scanner.Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest ]
        dotnet-version: [ 9.0.x ]
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🛠️ Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: 🔄 Restore Dependencies
        run: dotnet restore ./tests/Cosmos.Scanner.Tests/Cosmos.Scanner.Tests.csproj

      - name: 🔨 Build Cosmos.Patcher
        run: dotnet build ./src/Cosmos.Patcher/Cosmos.Patcher.csproj

      - name: 🔨 Build Cosmos.Patcher.Build
        run: dotnet build ./src/Cosmos.Patcher.Build/Cosmos.Patcher.Build.csproj

      - name: 🔨 Build Cosmos.Scanner.Tests
        run: dotnet build ./tests/Cosmos.Scanner.Tests/Cosmos.Scanner.Tests.csproj --configuration Debug --no-restore

      - name: 🚀 Run Tests
        run: dotnet test ./tests/Cosmos.Scanner.Tests/Cosmos.Scanner.Tests.csproj --no-build --configuration Debug --logger "trx;LogFileName=Cosmos.Scanner.Tests.trx"

      - name: 📤 Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: Cosmos.Scanner.Tests-Results
          path: ./tests/Cosmos.Scanner.Tests/TestResults/Cosmos.Scanner.Tests.trx

  analyzer-tests:
    name: Run Cosmos.Patcher.Analyzer.Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest ]
        dotnet-version: [ 9.0.x ]
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🛠️ Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: 🔄 Restore Dependencies
        run: dotnet restore ./tests/Cosmos.Patcher.Analyzer.Tests/Cosmos.Patcher.Analyzer.Tests.csproj

      - name: 🔨 Build Cosmos.Patcher.Analyzer.Tests
        run: dotnet build ./tests/Cosmos.Patcher.Analyzer.Tests/Cosmos.Patcher.Analyzer.Tests.csproj --configuration Debug --no-restore

      - name: 🚀 Run Tests
        run: dotnet test ./tests/Cosmos.Patcher.Analyzer.Tests/Cosmos.Patcher.Analyzer.Tests.csproj --no-build --configuration Debug --logger "trx;LogFileName=Cosmos.Patcher.Analyzer.Tests.trx"

      - name: 📤 Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: Cosmos.Patcher.Analyzer.Tests-Results
          path: ./tests/Cosmos.Patcher.Analyzer.Tests/TestResults/Cosmos.Patcher.Analyzer.Tests.trx

  asm-tests:
    name: Run Cosmos.Asm.Build.Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest ]
        dotnet-version: [ 9.0.x ]
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🛠️ Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: 🔗 Install Linking Tools
        run: sudo apt-get update && sudo apt-get install -y yasm

      - name: 🔄 Restore Dependencies
        run: dotnet restore ./tests/Cosmos.Asm.Build.Test/Cosmos.Asm.Build.Test.csproj

      - name: 🔨 Build Cosmos.Patcher
        run: dotnet build ./src/Cosmos.Patcher/Cosmos.Patcher.csproj

      - name: 🔨 Build Cosmos.Patcher.Build
        run: dotnet build ./src/Cosmos.Patcher.Build/Cosmos.Patcher.Build.csproj

      - name: 🔨 Build Cosmos.Asm.Build.Test
        run: dotnet build ./tests/Cosmos.Asm.Build.Test/Cosmos.Asm.Build.Test.csproj --configuration Debug --no-restore

      - name: 🚀 Run Tests
        run: dotnet test ./tests/Cosmos.Asm.Build.Test/Cosmos.Asm.Build.Test.csproj --no-build --configuration Debug --logger "trx;LogFileName=Cosmos.Asm.Build.Test.trx"

      - name: 📤 Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: Cosmos.Asm.Build.Test-Results
          path: ./tests/Cosmos.Asm.Build.Test/TestResults/Cosmos.Asm.Build.Test.trx

  unix-iso-tests:
    name: Run ISO Build Tests - Unix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest ]
        dotnet-version: [ 9.0.x ]
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🛠️ Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: 🔗 Install Linking Tools
        run: sudo apt-get update && sudo apt-get install -y xorriso lld yasm

      - name: 🔧 Install ilc
        run: dotnet tool install -g ilc

      - name: 🔄 Restore Dependencies
        run: dotnet restore

      - name: 🔨 Build Cosmos.Patcher
        run: dotnet build ./src/Cosmos.Patcher/Cosmos.Patcher.csproj

      - name: 🔨 Build Cosmos.Patcher.Build
        run: dotnet build ./src/Cosmos.Patcher.Build/Cosmos.Patcher.Build.csproj

      - name: 🔨 Build Cosmos.Ilc.Build
        run: dotnet build ./src/Cosmos.Ilc.Build/Cosmos.Ilc.Build.csproj

      - name: 🔨 Build Cosmos.Asm.Build
        run: dotnet build ./src/Cosmos.Asm.Build/Cosmos.Asm.Build.csproj

      - name: 🚀 Run Tests
        run: dotnet publish -c Debug -r linux-x64 --verbosity detailed ./examples/KernelExample/Kernel.csproj

      - name: 🕵️‍♂️ Verify Output
        run: |
          [ -f ./examples/KernelExample/output/Kernel.iso ] && echo "ISO exists" || (echo "ISO missing" && exit 1)
