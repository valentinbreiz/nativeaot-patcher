name: .NET Tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "**" ]

jobs:
  patcher-tests:
    name: Run Cosmos.Tests.Patcher
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]
        dotnet-version: [ 9.0.x ]
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üõ†Ô∏è Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: üîß Setup Windows Dependencies
        if: matrix.os == 'windows-latest'
        run: |
          # Install chocolatey if not present
          if (!(Get-Command choco -ErrorAction SilentlyContinue)) {
            Set-ExecutionPolicy Bypass -Scope Process -Force
            [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
            iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          }
          
          # Install required tools
          choco install -y yasm
          
          # Install mingw-w64 as cross-compiler base
          choco install -y mingw --version=11.2.0.07112021
          
          # Add mingw to PATH
          $mingwPath = "C:\tools\mingw64\bin"
          $env:PATH = "$mingwPath;$env:PATH"
          echo $mingwPath | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          
          # Create x86_64-elf-gcc wrapper for cross-compilation
          $wrapperScript = @"
          @echo off
          rem x86_64-elf-gcc wrapper using mingw-w64
          x86_64-w64-mingw32-gcc.exe %*
          "@
          
          $wrapperScript | Out-File -FilePath "$mingwPath\x86_64-elf-gcc.cmd" -Encoding ascii
          
          Write-Host "Verifying installations..."
          yasm --version
          gcc --version
          x86_64-elf-gcc --version
        shell: powershell

      - name: üîÑ Restore Dependencies
        run: dotnet restore ./tests/Cosmos.Tests.Patcher/Cosmos.Tests.Patcher.csproj

      - name: üì¶ Build Packages (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          dotnet build ./Packages.slnx -c Release
          dotnet nuget add source "$(Get-Location)\artifacts\package\release" --name local-packages
          dotnet nuget locals all --clear
        shell: powershell

      - name: üì¶ Build Packages (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          dotnet build ./Packages.slnx -c Release
          dotnet nuget add source "$PWD/artifacts/package/release" --name local-packages
          dotnet nuget locals all --clear

      - name: üî® Build Cosmos.Patcher
        run: dotnet build ./src/Cosmos.Patcher/Cosmos.Patcher.csproj

      - name: üî® Build Cosmos.Build.Patcher
        run: dotnet build ./src/Cosmos.Build.Patcher/Cosmos.Build.Patcher.csproj

      - name: üî® Build Cosmos.Tests.Patcher
        run: dotnet build ./tests/Cosmos.Tests.Patcher/Cosmos.Tests.Patcher.csproj --configuration Debug --no-restore

      - name: üöÄ Run Tests
        run: dotnet test ./tests/Cosmos.Tests.Patcher/Cosmos.Tests.Patcher.csproj --no-build --configuration Debug --logger "trx;LogFileName=Cosmos.Tests.Patcher.trx"

      - name: üì§ Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: Cosmos.Tests.Patcher-Results-${{ matrix.os }}
          path: ./tests/Cosmos.Tests.Patcher/TestResults/Cosmos.Tests.Patcher.trx

  scanner-tests:
    name: Run Cosmos.Tests.Scanner
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]
        dotnet-version: [ 9.0.x ]
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üõ†Ô∏è Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: üîß Setup Windows Dependencies
        if: matrix.os == 'windows-latest'
        run: |
          # Install chocolatey if not present
          if (!(Get-Command choco -ErrorAction SilentlyContinue)) {
            Set-ExecutionPolicy Bypass -Scope Process -Force
            [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
            iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          }
          
          # Install required tools
          choco install -y yasm
          
          # Install mingw-w64 as cross-compiler base
          choco install -y mingw --version=11.2.0.07112021
          
          # Add mingw to PATH
          $mingwPath = "C:\tools\mingw64\bin"
          $env:PATH = "$mingwPath;$env:PATH"
          echo $mingwPath | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          
          # Create x86_64-elf-gcc wrapper for cross-compilation
          $wrapperScript = @"
          @echo off
          rem x86_64-elf-gcc wrapper using mingw-w64
          x86_64-w64-mingw32-gcc.exe %*
          "@
          
          $wrapperScript | Out-File -FilePath "$mingwPath\x86_64-elf-gcc.cmd" -Encoding ascii
          
          Write-Host "Verifying installations..."
          yasm --version
          gcc --version
          x86_64-elf-gcc --version
        shell: powershell

      - name: üì¶ Build Packages (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          dotnet build ./Packages.slnx -c Release
          dotnet nuget add source "$(Get-Location)\artifacts\package\release" --name local-packages
          dotnet nuget locals all --clear
        shell: powershell

      - name: üì¶ Build Packages (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          dotnet build ./Packages.slnx -c Release
          dotnet nuget add source "$PWD/artifacts/package/release" --name local-packages
          dotnet nuget locals all --clear

      - name: üîÑ Restore Dependencies
        run: dotnet restore ./tests/Cosmos.Tests.Scanner/Cosmos.Tests.Scanner.csproj

      - name: üî® Build Cosmos.Patcher
        run: dotnet build ./src/Cosmos.Patcher/Cosmos.Patcher.csproj

      - name: üî® Build Cosmos.Build.Patcher
        run: dotnet build ./src/Cosmos.Build.Patcher/Cosmos.Build.Patcher.csproj

      - name: üî® Build Cosmos.Tests.Scanner
        run: dotnet build ./tests/Cosmos.Tests.Scanner/Cosmos.Tests.Scanner.csproj --configuration Debug --no-restore

      - name: üöÄ Run Tests
        run: dotnet test ./tests/Cosmos.Tests.Scanner/Cosmos.Tests.Scanner.csproj --no-build --configuration Debug --logger "trx;LogFileName=Cosmos.Tests.Scanner.trx"

      - name: üì§ Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: Cosmos.Tests.Scanner-Results-${{ matrix.os }}
          path: ./tests/Cosmos.Tests.Scanner/TestResults/Cosmos.Tests.Scanner.trx

  analyzer-tests:
    name: Run Cosmos.Tests.Build.Analyzer.Patcher
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]
        dotnet-version: [ 9.0.x ]
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üõ†Ô∏è Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: üîß Setup Windows Dependencies
        if: matrix.os == 'windows-latest'
        run: |
          # Install chocolatey if not present
          if (!(Get-Command choco -ErrorAction SilentlyContinue)) {
            Set-ExecutionPolicy Bypass -Scope Process -Force
            [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
            iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          }
          
          # Install required tools
          choco install -y yasm
          
          # Install mingw-w64 as cross-compiler base
          choco install -y mingw --version=11.2.0.07112021
          
          # Add mingw to PATH
          $mingwPath = "C:\tools\mingw64\bin"
          $env:PATH = "$mingwPath;$env:PATH"
          echo $mingwPath | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          
          # Create x86_64-elf-gcc wrapper for cross-compilation
          $wrapperScript = @"
          @echo off
          rem x86_64-elf-gcc wrapper using mingw-w64
          x86_64-w64-mingw32-gcc.exe %*
          "@
          
          $wrapperScript | Out-File -FilePath "$mingwPath\x86_64-elf-gcc.cmd" -Encoding ascii
          
          Write-Host "Verifying installations..."
          yasm --version
          gcc --version
          x86_64-elf-gcc --version
        shell: powershell

      - name: üì¶ Build Packages (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          dotnet build ./Packages.slnx -c Release
          dotnet nuget add source "$(Get-Location)\artifacts\package\release" --name local-packages
          dotnet nuget locals all --clear
        shell: powershell

      - name: üì¶ Build Packages (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          dotnet build ./Packages.slnx -c Release
          dotnet nuget add source "$PWD/artifacts/package/release" --name local-packages
          dotnet nuget locals all --clear

      - name: üîÑ Restore Dependencies
        run: dotnet restore ./tests/Cosmos.Tests.Build.Analyzer.Patcher/Cosmos.Tests.Build.Analyzer.Patcher.csproj

      - name: üî® Build Cosmos.Patcher.Analyzer.Tests
        run: dotnet build ./tests/Cosmos.Tests.Build.Analyzer.Patcher/Cosmos.Tests.Build.Analyzer.Patcher.csproj --configuration Debug --no-restore

      - name: üöÄ Run Tests
        run: dotnet test ./tests/Cosmos.Tests.Build.Analyzer.Patcher/Cosmos.Tests.Build.Analyzer.Patcher.csproj --no-build --configuration Debug --logger "trx;LogFileName=Cosmos.Tests.Build.Analyzer.Patcher.trx"

      - name: üì§ Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: Cosmos.Tests.Build.Analyzer.Patcher-Results-${{ matrix.os }}
          path: ./tests/Cosmos.Tests.Build.Analyzer.Patcher/TestResults/Cosmos.Tests.Build.Analyzer.Patcher.trx

  asm-tests:
    name: Run Cosmos.Build.Asm.Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]
        dotnet-version: [ 9.0.x ]
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üõ†Ô∏è Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: üîó Install Linking Tools (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y yasm

      - name: üîó Install Linking Tools (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          # Install chocolatey if not present
          if (!(Get-Command choco -ErrorAction SilentlyContinue)) {
            Set-ExecutionPolicy Bypass -Scope Process -Force
            [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
            iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          }
          
          # Install yasm
          choco install -y yasm
          
          Write-Host "Verifying YASM installation..."
          yasm --version
        shell: powershell

      - name: üì¶ Build Packages (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          dotnet build ./Packages.slnx -c Release
          dotnet nuget add source "$(Get-Location)\artifacts\package\release" --name local-packages
          dotnet nuget locals all --clear
        shell: powershell

      - name: üì¶ Build Packages (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          dotnet build ./Packages.slnx -c Release
          dotnet nuget add source "$PWD/artifacts/package/release" --name local-packages
          dotnet nuget locals all --clear

      - name: üîÑ Restore Dependencies
        run: dotnet restore ./tests/Cosmos.Tests.Build.Asm/Cosmos.Tests.Build.Asm.csproj

      - name: üî® Build Cosmos.Patcher
        run: dotnet build ./src/Cosmos.Patcher/Cosmos.Patcher.csproj

      - name: üî® Build Cosmos.Build.Patcher
        run: dotnet build ./src/Cosmos.Build.Patcher/Cosmos.Build.Patcher.csproj

      - name: üî® Build Cosmos.Build.Asm.Test
        run: dotnet build ./tests/Cosmos.Tests.Build.Asm/Cosmos.Tests.Build.Asm.csproj --configuration Debug --no-restore

      - name: üöÄ Run Tests
        run: dotnet test ./tests/Cosmos.Tests.Build.Asm/Cosmos.Tests.Build.Asm.csproj --no-build --configuration Debug --logger "trx;LogFileName=Cosmos.Tests.Build.Asm.trx"

      - name: üì§ Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: Cosmos.Build.Asm.Test-Results-${{ matrix.os }}
          path: ./tests/Cosmos.Tests.Build.Asm/TestResults/Cosmos.Tests.Build.Asm.trx

  unix-iso-tests:
    name: Run ISO Build Tests - Unix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest ]
        dotnet-version: [ 9.0.x ]
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üõ†Ô∏è Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: üîÑ Compile Packages
        run: ./.devcontainer/postCreateCommand.sh

      - name: üîó Install Linking Tools
        run: sudo apt-get update && sudo apt-get install -y xorriso lld yasm

      - name: üîß Install ilc
        run: dotnet tool install -g ilc

      - name: üîß Install Patcher
        run: dotnet tool install -g Cosmos.Patcher

      - name: üîÑ Restore Dependencies
        run: dotnet restore ./nativeaot-patcher.slnx

      - name: üöÄ Build ISO
        run: dotnet publish -c Debug -r linux-x64 --verbosity detailed ./examples/KernelExample/KernelExample.csproj -o ./output

      - name: üïµÔ∏è‚Äç‚ôÇÔ∏è Verify Output
        run: |
          [ -f ./output/KernelExample.iso ] && echo "ISO exists" || (echo "ISO missing" && exit 1)

      - name: üì§ Upload ISO
        uses: actions/upload-artifact@v4
        with:
          name: KernelExample-ISO-Linux
          path: ./output/KernelExample.iso

  windows-iso-tests:
    name: Run ISO Build Tests - Windows
    runs-on: windows-latest
    strategy:
      matrix:
        dotnet-version: [ 9.0.x ]
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üõ†Ô∏è Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: üîß Setup Windows Dependencies
        run: |
          # Install chocolatey if not present
          if (!(Get-Command choco -ErrorAction SilentlyContinue)) {
            Set-ExecutionPolicy Bypass -Scope Process -Force
            [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
            iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          }
          
          # Install required tools for ISO building
          choco install -y yasm
          
          # Install LLVM (includes ld.lld linker needed for ISO building)
          choco install -y llvm --version=18.1.8
          
          # Install mingw-w64 as cross-compiler base
          choco install -y mingw --version=11.2.0.07112021
          
          # Add tools to PATH
          $mingwPath = "C:\tools\mingw64\bin"
          $llvmPath = "C:\Program Files\LLVM\bin"
          $env:PATH = "$llvmPath;$mingwPath;$env:PATH"
          echo $llvmPath | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo $mingwPath | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          
          # Create x86_64-elf-gcc wrapper for cross-compilation
          $wrapperScript = @"
          @echo off
          rem x86_64-elf-gcc wrapper using mingw-w64
          x86_64-w64-mingw32-gcc.exe %*
          "@
          
          $wrapperScript | Out-File -FilePath "$mingwPath\x86_64-elf-gcc.cmd" -Encoding ascii
          
          Write-Host "Verifying installations..."
          yasm --version
          gcc --version
          x86_64-elf-gcc --version
          ld.lld --version
        shell: powershell

      - name: üîÑ Compile Packages
        run: .\install-packages.ps1
        shell: powershell

      - name: üîß Install ilc
        run: dotnet tool install -g ilc

      - name: üîß Install Patcher
        run: dotnet tool install -g Cosmos.Patcher

      - name: üîÑ Restore Dependencies
        run: dotnet restore ./nativeaot-patcher.slnx

      - name: üöÄ Build ISO
        run: dotnet publish -c Debug -r linux-x64 --verbosity detailed ./examples/KernelExample/KernelExample.csproj -o ./output

      - name: üïµÔ∏è‚Äç‚ôÇÔ∏è Verify Output
        run: |
          if (Test-Path "./output/KernelExample.iso") {
            Write-Host "ISO exists"
          } else {
            Write-Host "ISO missing"
            exit 1
          }
        shell: powershell

      - name: üì§ Upload ISO
        uses: actions/upload-artifact@v4
        with:
          name: KernelExample-ISO-Windows
          path: ./output/KernelExample.iso
