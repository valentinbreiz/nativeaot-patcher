name: .NET Tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "**" ]

jobs:
  patcher-tests:
    name: Run Cosmos.Tests.Patcher
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest ]
        dotnet-version: [ 9.0.x ]
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🛠️ Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: 🔄 Restore Dependencies
        run: dotnet restore ./tests/Cosmos.Tests.Patcher/Cosmos.Tests.Patcher.csproj

      - name: 🔨 Build Cosmos.Patcher
        run: dotnet build ./src/Cosmos.Patcher/Cosmos.Patcher.csproj

      - name: 🔨 Build Cosmos.Build.Patcher
        run: dotnet build ./src/Cosmos.Build.Patcher/Cosmos.Build.Patcher.csproj

      - name: 🔨 Build Cosmos.Tests.Patcher
        run: dotnet build ./tests/Cosmos.Tests.Patcher/Cosmos.Tests.Patcher.csproj --configuration Debug --no-restore

      - name: 🚀 Run Tests
        run: dotnet test ./tests/Cosmos.Tests.Patcher/Cosmos.Tests.Patcher.csproj --no-build --configuration Debug --logger "trx;LogFileName=Cosmos.Tests.Patcher.trx"

      - name: 📤 Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: Cosmos.Tests.Patcher-Results
          path: ./tests/Cosmos.Tests.Patcher/TestResults/Cosmos.Tests.Patcher.trx

  scanner-tests:
    name: Run Cosmos.Tests.Scanner
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest ]
        dotnet-version: [ 9.0.x ]
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🛠️ Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: 🔄 Restore Dependencies
        run: dotnet restore ./tests/Cosmos.Tests.Scanner/Cosmos.Tests.Scanner.csproj

      - name: 🔨 Build Cosmos.Patcher
        run: dotnet build ./src/Cosmos.Patcher/Cosmos.Patcher.csproj

      - name: 🔨 Build Cosmos.Build.Patcher
        run: dotnet build ./src/Cosmos.Build.Patcher/Cosmos.Build.Patcher.csproj

      - name: 🔨 Build Cosmos.Tests.Scanner
        run: dotnet build ./tests/Cosmos.Tests.Scanner/Cosmos.Tests.Scanner.csproj --configuration Debug --no-restore

      - name: 🚀 Run Tests
        run: dotnet test ./tests/Cosmos.Tests.Scanner/Cosmos.Tests.Scanner.csproj --no-build --configuration Debug --logger "trx;LogFileName=Cosmos.Tests.Scanner.trx"

      - name: 📤 Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: Cosmos.Tests.Scanner-Results
          path: ./tests/Cosmos.Tests.Scanner/TestResults/Cosmos.Tests.Scanner.trx

  analyzer-tests:
    name: Run Cosmos.Tests.Build.Analyzer.Patcher
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest ]
        dotnet-version: [ 9.0.x ]
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🛠️ Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: 🔄 Restore Dependencies
        run: dotnet restore ./tests/Cosmos.Tests.Build.Analyzer.Patcher/Cosmos.Tests.Build.Analyzer.Patcher.csproj

      - name: 🔨 Build Cosmos.Patcher.Analyzer.Tests
        run: dotnet build ./tests/Cosmos.Tests.Build.Analyzer.Patcher/Cosmos.Tests.Build.Analyzer.Patcher.csproj --configuration Debug --no-restore

      - name: 🚀 Run Tests
        run: dotnet test ./tests/Cosmos.Tests.Build.Analyzer.Patcher/Cosmos.Tests.Build.Analyzer.Patcher.csproj --no-build --configuration Debug --logger "trx;LogFileName=Cosmos.Tests.Build.Analyzer.Patcher.trx"

      - name: 📤 Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: Cosmos.Tests.Build.Analyzer.Patcher-Results
          path: ./tests/Cosmos.Tests.Build.Analyzer.Patcher/TestResults/Cosmos.Tests.Build.Analyzer.Patcher.trx

  asm-tests:
    name: Run Cosmos.Build.Asm.Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest ]
        dotnet-version: [ 9.0.x ]
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🛠️ Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: 🔗 Install Linking Tools
        run: sudo apt-get update && sudo apt-get install -y yasm

      - name: 🔄 Restore Dependencies
        run: dotnet restore ./tests/Cosmos.Tests.Build.Asm/Cosmos.Tests.Build.Asm.csproj

      - name: 🔨 Build Cosmos.Patcher
        run: dotnet build ./src/Cosmos.Patcher/Cosmos.Patcher.csproj

      - name: 🔨 Build Cosmos.Build.Patcher
        run: dotnet build ./src/Cosmos.Build.Patcher/Cosmos.Build.Patcher.csproj

      - name: 🔨 Build Cosmos.Build.Asm.Test
        run: dotnet build ./tests/Cosmos.Tests.Build.Asm/Cosmos.Tests.Build.Asm.csproj --configuration Debug --no-restore

      - name: 🚀 Run Tests
        run: dotnet test ./tests/Cosmos.Tests.Build.Asm/Cosmos.Tests.Build.Asm.csproj --no-build --configuration Debug --logger "trx;LogFileName=Cosmos.Tests.Build.Asm.trx"

      - name: 📤 Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: Cosmos.Build.Asm.Test-Results
          path: ./tests/Cosmos.Tests.Build.Asm/TestResults/Cosmos.Tests.Build.Asm.trx

  unix-iso-tests:
    name: Run ISO Build Tests - Unix (${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest ]
        dotnet-version: [ 9.0.x ]
        arch: [ x64, arm64 ]
        include:
          - arch: x64
            rid: linux-x64
            assembler: yasm
          - arch: arm64
            rid: linux-arm64
            assembler: gcc-aarch64-linux-gnu
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: 🛠️ Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: 🔄 Compile Packages for ${{ matrix.arch }}
        run: ./.devcontainer/postCreateCommand.sh ${{ matrix.arch }}

      - name: 🔗 Install Common Linking Tools
        run: sudo apt-get update && sudo apt-get install -y xorriso lld

      - name: 🔗 Install x64 Assembler
        if: matrix.arch == 'x64'
        run: sudo apt-get install -y yasm

      - name: 🔗 Install ARM64 Cross-Compilation Tools
        if: matrix.arch == 'arm64'
        run: sudo apt-get install -y gcc-aarch64-linux-gnu binutils-aarch64-linux-gnu

      - name: 🔧 Install ilc
        run: dotnet tool install -g ilc

      - name: 🔧 Install Patcher
        run: dotnet tool install -g Cosmos.Patcher

      - name: 🔄 Restore Dependencies
        run: dotnet restore ./nativeaot-patcher.slnx

      - name: 🚀 Build ISO for ${{ matrix.arch }}
        run: |
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            ARCH_DEFINE="ARCH_ARM64"
          else
            ARCH_DEFINE="ARCH_X64"
          fi
          dotnet publish -c Debug -r ${{ matrix.rid }} -p:DefineConstants="$ARCH_DEFINE" --verbosity detailed ./examples/KernelExample/KernelExample.csproj -o ./output-${{ matrix.arch }}

      - name: 🕵️‍♂️ Verify Output
        run: |
          [ -f ./output-${{ matrix.arch }}/KernelExample.iso ] && echo "ISO exists for ${{ matrix.arch }}" || (echo "ISO missing for ${{ matrix.arch }}" && exit 1)

      - name: 📤 Upload ISO
        uses: actions/upload-artifact@v4
        with:
          name: KernelExample-ISO-${{ matrix.arch }}
          path: ./output-${{ matrix.arch }}/KernelExample.iso

  windows-iso-tests:
    name: Run ISO Build Tests - Windows (${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ windows-latest ]
        dotnet-version: [ 9.0.x ]
        arch: [ x64, arm64 ]
        include:
          - arch: x64
            rid: windows-x64
            assembler: yasm
          - arch: arm64
            rid: windows-arm64
            assembler: gcc-aarch64-linux-gnu
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🛠️ Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: 🔗 Install Linking Tools
        uses: crazy-max/ghaction-chocolatey@v3.3.0
        with:
          args: install -y llvm
      
      - name: 🔗 Install x64 Assembler
        if: matrix.arch == 'x64'
        uses: crazy-max/ghaction-chocolatey@v3.3.0
        with:
          args: install -y yasm

      - name: 🔗 Install ARM64 Cross-Compilation Tools
        if: matrix.arch == 'arm64'
        run: |
            curl -LO https://github.com/lordmilko/i686-elf-tools/releases/download/13.2.0/x86_64-elf-tools-windows.zip
            Expand-Archive x86_64-elf-tools-windows.zip -DestinationPath C:\x86_64-elf-tools
            setx PATH "%PATH%;C:\x86_64-elf-tools\bin"

      - name: 🔄 Compile Packages for ${{ matrix.arch }}
        shell: bash
        run: ./.devcontainer/postCreateCommand.sh ${{ matrix.arch }}
          
      - name: 🔧 Install ilc
        run: dotnet tool install -g ilc

      - name: 🔧 Install Patcher
        run: dotnet tool install -g Cosmos.Patcher

      - name: 🔄 Restore Dependencies
        run: dotnet restore ./nativeaot-patcher.slnx

      - name: 🚀 Build ISO for ${{ matrix.arch }}
        run: |
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            ARCH_DEFINE="ARCH_ARM64"
          else
            ARCH_DEFINE="ARCH_X64"
          fi
          dotnet publish -c Debug -r ${{ matrix.rid }} -p:DefineConstants="$ARCH_DEFINE" --verbosity detailed ./examples/KernelExample/KernelExample.csproj -o ./output-${{ matrix.arch }}

      - name: 🕵️‍♂️ Verify Output
        shell: bash
        run: |
          [ -f ./output-${{ matrix.arch }}/KernelExample.iso ] && echo "ISO exists for ${{ matrix.arch }}" || (echo "ISO missing for ${{ matrix.arch }}" && exit 1)

      - name: 📤 Upload ISO
        uses: actions/upload-artifact@v4
        with:
          name: KernelExample-ISO-${{ matrix.arch }}
          path: ./output-${{ matrix.arch }}/KernelExample.iso