<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cosmos.Build.API</name>
    </assembly>
    <members>
        <member name="T:Cosmos.Build.API.Attributes.PlatformSpecificAttribute">
            <summary>
            Indicates that a type or member is specific to certain processor architectures.
            The patcher will filter these elements based on the target architecture during build.
            </summary>
            <remarks>
            Creates a new PlatformSpecific attribute.
            </remarks>
        </member>
        <member name="P:Cosmos.Build.API.Attributes.PlatformSpecificAttribute.Architecture">
            <summary>
            The architectures this plug supports.
            </summary>
        </member>
        <member name="M:Cosmos.Build.API.Attributes.PlugAttribute.#ctor">
            <summary>
            does not have a base type
            </summary>
        </member>
        <member name="M:Cosmos.Build.API.Attributes.PlugAttribute.#ctor(System.Type)">
            <summary>
            set base type by type
            </summary>
            <param name="target"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:Cosmos.Build.API.Attributes.PlugAttribute.TargetName">
            <summary>
            the type as a string
            </summary>
        </member>
        <member name="P:Cosmos.Build.API.Attributes.PlugAttribute.IsOptional">
            <summary>
            if the type cant be found skip
            </summary>
        </member>
        <member name="T:Cosmos.Build.API.Enum.PlatformArchitecture">
            <summary>
            Processor architectures supported by the kernel.
            </summary>
        </member>
        <member name="F:Cosmos.Build.API.Enum.PlatformArchitecture.None">
            <summary>
            No specific architecture (platform-agnostic).
            </summary>
        </member>
        <member name="F:Cosmos.Build.API.Enum.PlatformArchitecture.X64">
            <summary>
            x86-64 / AMD64 architecture.
            </summary>
        </member>
        <member name="F:Cosmos.Build.API.Enum.PlatformArchitecture.ARM64">
            <summary>
            ARM64 / AArch64 architecture.
            </summary>
        </member>
        <member name="F:Cosmos.Build.API.Enum.PlatformArchitecture.RISCV64">
            <summary>
            RISC-V 64-bit architecture.
            </summary>
        </member>
        <member name="F:Cosmos.Build.API.Enum.PlatformArchitecture.All">
            <summary>
            All supported architectures.
            </summary>
        </member>
        <member name="F:Cosmos.Build.API.LabelMaker.LabelNamesCache">
            <summary>
            Cache for label names.
            </summary>
        </member>
        <member name="M:Cosmos.Build.API.LabelMaker.GetFullName(System.Type,System.Boolean)">
            <summary>
            Get internal name for the type
            </summary>
            <param name="aType"></param>
            <param name="aAssemblyIncluded">If true, the assembly id is included</param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Build.API.LabelMaker.GetFullName(System.Reflection.MethodBase,System.Boolean)">
            <summary>
            Get the full name for the method
            </summary>
            <param name="aMethod"></param>
            <param name="aAssemblyIncluded">If true, id of assembly is included</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Build.API.LabelMaker.GetStaticFieldName(System.Type,System.String)">
            <summary>
            Gets a label for the given static field
            </summary>
            <param name="aType"></param>
            <param name="aField"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">throws if its not static</exception>
        </member>
        <member name="M:Cosmos.Build.API.LabelMaker.GetStaticFieldName(System.Reflection.FieldInfo)">
            <summary>
            Gets a label for the given static field
            </summary>
            <param name="aField"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">throws if its not static</exception>
        </member>
    </members>
</doc>
